---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import BlogCard from "../components/BlogCard.astro";
const [...posts] = (await getCollection("blog")).sort(
	(a, b) =>
		(new Date(b.data.pubDate) as any) - (new Date(a.data.pubDate) as any),
);
const pageTitle = "Blog";
---

<Layout title={pageTitle}>
	<div class="inline-flex sm:overflow-hidden justify-between">
		<h1 class="inline-flex pb-0">Posts</h1>

		<input
			class="blog-search searchInput"
			type="text"
			placeholder="search..."
			value=""
		/>
	</div>
	<div id="blogsContainer">
		{
			posts.map((post: any) => {
				return (
					<BlogCard
						id={post.id}
						title={post.data.title}
						author={post.data.author}
						description={post.data.description}
						pubDate={post.data.pubDate}
						tags={post.data.tags}
					/>
				);
			})
		}
	</div>
	<script is:inline data-astro-rerun>
		function debounce(callback, delay) {
			let debounceTimer;
			return function (...args) {
				clearTimeout(debounceTimer);
				debounceTimer = setTimeout(() => {
					callback(...args);
				}, delay);
			};
		}
		function handleSearch() {
			var searchInput = document.querySelector(".searchInput");
			//console.log("handleSearch");
			const blogCards = document.querySelectorAll(".blog-card");
			//let returnedCards = [];
			const query = searchInput.value
				.trim()
				.toLowerCase()
				.replace(/([\.\^\$\*\+\?\(\)\[\]\{\}\\\|\/])/g, "\\$&");
			blogCards.forEach((card) => {
				card.classList.remove("hidden");

				let elements = card.querySelectorAll(".searchable");
				elements.forEach((element) => {
					if (element.classList.contains("blog-title")) {
						element.innerHTML = `${card.dataset.title}`;
					} else if (element.classList.contains("blog-author-date")) {
						element.innerHTML = `${card.dataset.author} - ${card.dataset.date}`;
					} else if (element.classList.contains("blog-description")) {
						element.innerHTML = `${card.dataset.description}`;
					} else if (element.classList.contains("blog-tag")) {
						// implement blog tag highlight cleaning on empty query
					}
					return;
				});
			});

			blogCards.forEach((card) => {
				let elements = card.querySelectorAll(".searchable");
				card.classList.add("hidden");
				elements.forEach((element) => {
					let htmlStr = element.innerHTML;
					let htmlCompareStr = htmlStr.toLowerCase();
					if (htmlCompareStr.search(query) != -1) {
						card.classList.remove("hidden");
						let regEx = new RegExp(
							`(?<!<[^>]*)(?<!>\w*)${query}(?<!\w*<)(?![^<]*>)`,
							"i",
						);
						while (htmlCompareStr.search(regEx) != -1) {
							let matchPos = htmlCompareStr.search(regEx);
							let matchedStr = htmlStr.slice(
								matchPos,
								query.length + matchPos,
							);
							if (!matchedStr) break;
							htmlStr = htmlStr.replace(
								regEx,
								`<span class="highlight">${matchedStr}</span>`,
							);
							htmlCompareStr = htmlStr.toLowerCase();
							element.innerHTML = htmlStr;
						}
					} else {
						return;
					}
				});
			});
			//const { id, title, description, author, date, tags } =
			//	card.dataset;
			//const searchableText = [
			//	id,
			//	title,
			//	description,
			//	author,
			//	date,
			//	tags,
			//]
			//	.join(" ")
			//	.toLowerCase();

			//card.querySelectorAll(".searchable").forEach((element: HTMLElement) => {
			//
			//});

			//if (searchableText.includes(query)) {
			//	returnedCards.push(card);
			//	card.classList.remove("hidden");
			//} else {
			//	card.classList.add("hidden");
			//}

			//returnedCards.forEach((card) => {
			//	let elements = card.querySelectorAll(".searchable");
			//
			//	elements.forEach((element) => {
			//		if (element.className.includes("title")) {
			//			element.innerHTML = `${card.dataset.title}`;
			//		} else if (element.className.includes("author")) {
			//			element.innerHTML = `${card.dataset.author} - ${card.dataset.date}`;
			//		} else if (element.className.includes("description")) {
			//			element.innerHTML = `${card.dataset.description}`;
			//		}
			//
			//		let htmlStr = element.innerHTML;
			//		let compareStr = htmlStr.toLowerCase();
			//		if (compareStr.includes(query)) {
			//			let slicePos = compareStr.indexOf(query);
			//			let slicedStr = htmlStr.slice(
			//				slicePos,
			//				query.length + slicePos,
			//			);
			//			let appendedStr = `<span class="highlight">${slicedStr}</span>`;
			//			let newStr = htmlStr.replace(slicedStr, appendedStr);
			//			element.innerHTML = newStr;
			//		}
			//	});
			//
			//console.log(elements);
			//for (
			//	let child = card.firstChild;
			//	child !== null;
			//	child = child.nextSibling
			//) {
			//	if (child.innerHTML == undefined) {
			//		console.log(undefined); // console log
			//		continue;
			//	}
			//	let htmlStr = child.innerHTML;
			//	let htmlCompare = htmlStr.toLowerCase();
			//	if (htmlCompare.includes(query)) {
			//		let slicePos = htmlCompare.match(query);
			//		console.log(htmlStr); // console log
			//		console.log(slicePos); // console log
			//	}
			//}
			//});
		}

		function initializeSearchListener() {
			var searchInput = document.querySelector(".searchInput");
			if (searchInput) {
				searchInput.addEventListener(
					"input",
					debounce(handleSearch, 300),
				);
			}
		}

		document.querySelector(".searchInput").value = "";
		initializeSearchListener();
	</script>
</Layout>
